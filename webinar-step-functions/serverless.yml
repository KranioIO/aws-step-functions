service: webinar-step-functions

# frameworkVersion: '2.3.0'
provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  prefix: ${self:service}-${self:provider.stage}
  versionFunctions: false
  deploymentBucket: 
    # aquí debe ir el nombre de un bucket de S3 que determines para deployment. Ejemplo: mi_proyecto_serverless_s3
    # si pones el mismo en cada archivo serverless, tu deploy por proyecto quedará ordenado y dentro del mismo bucket.
    name: kranio-webinar 

package:
  excludeDevDependencies: false

custom:
  prefix: '${self:service}-${self:provider.stage}'
  # arn_prefix es un string que se repetiría muchas veces si no se parametriza. en dev.yml podrás ver qué contiene.
  # según tus variables por ambiente, debes hacer un documento en caso de ser necesario.
  arn_prefix: '${file(${self:provider.stage}.yml):arn_prefix}'
  defaultErrorHandler:
    ErrorEquals: ["States.ALL"]
    Next: CatchError
# funciones lambda
functions:
  receiveLead:
    handler: functions/receive_lead.handler  
  createClient:
    handler: functions/create_client.handler    
  createPartner:
    handler: functions/create_partner.handler
  createBenefit:
    handler: functions/create_benefit.handler
  catchErrors:
    handler: functions/catch_errors.handler

# los step functiosn
stepFunctions:
  stateMachines:
    CreateClientCRM:
      # aqui indicamos que el state machine se inicia cuando 
      # ocurre el evento eventBridge que tiene ese eventBusName y 
      # source en específico
      name: CreateClientCRM
      events:
        - eventBridge:
            eventBusName: WebinarEventBus
            event:
              source:
                - "kranio.event.crm"
      definition:
        # aqui indicamos que el state machine parte con este paso.
        Comment: inicia proceso de inscripcion de cliente
        StartAt: ReceiveLead
        States:
          # ahora indicamos los stados.
          # type indica que estos pasos son tareas.
          # resource indica el arn de la función lambda que 
          # se debe ejcutar en este paso
          # next indica el paso que viene
          # catch indica a qué función llamamos si ocurre un error
          ReceiveLead:
            Type: Task
            Resource: '${self:custom.arn_prefix}-receiveLead'
            Next: CreateClient
            Catch: 
              - ${self:custom.defaultErrorHandler}
          CreateClient:
            Type: Task
            Resource: '${self:custom.arn_prefix}-createClient'
            Next: CreatePartner
            Catch: 
              - ${self:custom.defaultErrorHandler}
          CreatePartner:
            Type: Task
            Resource: '${self:custom.arn_prefix}-createPartner'
            Next: CreateBenefit
            Catch: 
              - ${self:custom.defaultErrorHandler}
          CreateBenefit:
            Type: Task
            Resource: '${self:custom.arn_prefix}-createBenefit'
            Catch: 
              - ${self:custom.defaultErrorHandler}
            End: true
          CatchError:
            Type: Task
            Resource: '${self:custom.arn_prefix}-catchErrors' 
            End: true

  Outputs:
    CreateClientLambdaFunctionQualifiedArn:
      Value:
        Fn::GetAtt:
          - CreateClientLambdaFunctionQualifiedArn
          - Arn
      Export:
        Name: ${self:custom.prefix}-CreateClientLambdaFunction
    CreatePartnerLambdaFunctionQualifiedArn:
      Value:
        Fn::GetAtt:
          - CreatePartnerLambdaFunctionQualifiedArn
          - Arn
      Export:
        Name: ${self:custom.prefix}-CreatePartnerLambdaFunction
    CreateBenefitLambdaFunctionQualifiedArn:
      Value:
        Fn::GetAtt:
          - CreateBenefitLambdaFunctionQualifiedArn
          - Arn
      Export:
        Name: ${self:custom.prefix}-CreateBenefitLambdaFunction

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-include-dependencies
  - serverless-dotenv-plugin
