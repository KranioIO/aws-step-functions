openapi: "3.0.1"
info:
  title: "testapi"
  version: "2021-01-21T15:44:04Z"
servers:
  - url: "https://{id-de-api}.execute-api.us-east-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "/dev"
# endpoint para crear cliente.
paths:
  /create_client:
    post:
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseBody"
      requestBody:
        description: req body para crear cliente
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequestBody"
            example:
              name: alice
              lastname: cooper
              rut: 11111111-1
              phone: 54545454
              mail: acooper@alice.com
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:193024568733:function:${stageVariables.CreateClientBackLambdaFunction}/invocations
        responses:
          default:
            statusCode: 200
        credentials: arn:aws:iam::193024568733:role/${stageVariables.ApiGatewayStepFunctionLambdaRole}
        httpMethod: POST
        passthroughBehavior: "when_no_match"
        type: aws_proxy
#endpoint para crear socio
  /create_partner:
    post:
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseBody"
      requestBody:
        description: req body para crear socio
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartnerRequestBody"
            example:
              rut: 11111111-1
              store: ESTACION_CENTRAL
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:193024568733:function:${stageVariables.CreatePartnerBackLambdaFunction}/invocations
        responses:
          default:
            statusCode: 200
        credentials: arn:aws:iam::193024568733:role/${stageVariables.ApiGatewayStepFunctionLambdaRole}
        httpMethod: POST
        passthroughBehavior: "when_no_match"
        type: aws_proxy
#endpoint para crear beneficio
  /create_benefit:
    post:
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseBody"
      requestBody:
        description: req body para crear beneficio
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBenefitRequestBody"
            example:
              rut: 11111111-1
              wantsBenefit: true  
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:193024568733:function:${stageVariables.CreateBenefitBackLambdaFunction}/invocations
        responses:
          default:
            statusCode: 200
        credentials: arn:aws:iam::193024568733:role/${stageVariables.ApiGatewayStepFunctionLambdaRole}
        httpMethod: POST
        passthroughBehavior: "when_no_match"
        type: aws_proxy

components:
  schemas:
    CreateClientRequestBody:
      title: Create Client Req Body
      type: object
      properties:
        name:
          type: string
        lastname:
          type: string
        rut:
          type: string
        phone:
          type: string
        mail:
          type: string
    CreatePartnerRequestBody:
      title: Create Partner Req Body
      type: object
      properties:
        rut:
          type: string
        store:
          type: string
    CreateBenefitRequestBody:
      title: Create Benefit Req Body
      type: object
      properties:
        rut:
          type: string
        wantsBenefit:
          type: bool
    ApiResponseBody:
      title: Api Res Body
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        description:
          type: string
        

  